;; -*- mode: lisp -*-
(include "./widgets/workspaces.yuck")
(include "./widgets/audio.yuck")
(include "./widgets/bluetooth.yuck")
(include "./widgets/power.yuck")
(include "./widgets/mic.yuck")
(include "./widgets/wifi.yuck")
(include "./widgets/apps.yuck")
(include "./widgets/PacLog.yuck")

(deflisten Date :initial "{}"
  `~/.config/eww/bin/date_simple`)

(defwidget dateStyled []
  (box :class "large" :space-evenly false 
    (label :class "bold" :text "${Date.H}:${Date.M}")
    (label 
      :valign "start" 
      :class "medium italic colorMe" 
      :text "${Date.Day}"
    ) 
    (box :orientation "v" :space-evenly false 
      (label 
        :class "small italic" 
        :text "${Date.Month} ${Date.Year}"
      )
      (label 
        :halign "end" 
        :class "small italic colorMe" 
        :text "${Date.DayOfWeek}"
      )
    )
  )
)

(defwindow barMin
  :monitor '["<primary>", "1", "0"]' 
  :stacking "fg"
  :windowtype "dock"
  :wm-ignore true
  :geometry (geometry
              :width "100%"
              :height 5
              :anchor "top center")
  (eventbox
    :class "bar-swiper"
    :onscroll "eww close barMin && eww open bar"))
   

(defwindow bar
  :monitor '["<primary>", "1", "0"]' 
  :stacking "fg"
  :windowtype "dock"
  :exclusive true
  :geometry (geometry
              :width "100%"
              :height 20
              :anchor "top center")
  (eventbox
    :onscroll "eww close-all && eww open barMin"
    (box
      :class "bar-box"
      (box 
        :halign "start"
        :space-evenly false
        :spacing 5
        (eventbox :class "large" :onclick "eww open --toggle leftPanel" "Û∞çú")
        (systray :spacing 2)
      )
      (box
        :halign "center"
        (workspaces)
      )
      (box
        :halign "end"
        :spacing 5
        :space-evenly false
        (pacmanButton)
        (audioButton)
        (micButton)
        (bluetoothButton)
        (wifiButton)
        (eventbox 
          :onclick "eww open --toggle rightPanel"
          (dateStyled)
        )
        (powerButton)
      )
    )
  )
)


(defwindow leftPanel
  :monitor '["<primary>", "1", "0"]' 
  :stacking "fg"
  :focusable false
  :geometry (geometry
              :anchor "top left"
              :height "100%"
              :width 400
              :vexpand true)
  (eventbox 
    :onhover 'eww update hover_state="leftPanel"'
    :onhoverlost 'eww update hover_state="" && ./scripts/check_hover.sh leftPanel &'
    (box 
      :class "window left"
      (box 
        :orientation "v"
        :space-evenly false
        (applications)
      )
    )
  )
)


(defwindow rightPanel
  :monitor '["<primary>", "1", "0"]' 
  :stacking "fg"
  :geometry (geometry
              :anchor "top right"
              :height "100%"
              :width 500
              :vexpand true)
  (eventbox 
    :onhover 'eww update hover_state="rightPanel"'
    :onhoverlost 'eww update hover_state="" && ./scripts/check_hover.sh rightPanel &'
    (box :class "window right"
      (box 
        :orientation "v"
        :space-evenly false
        (audio)
        (Spacer)
        (box 
          :valign "start"
          :orientation "v"
          :vexpand true
          :space-evenly false
          (box :class "btns-box" :hexpand true :space-evenly true
            (button 
              :onclick "eww update networkIndex=0" 
              :class "inactive"
              (label :text "bluetooth")
            )
            (button 
              :onclick "eww update networkIndex=1" 
              :class "inactive"
              (label :text "wifi")
            )
          )
          (stack 
            :selected networkIndex
            :transition "${networkIndex == 0 ? "slideleft": "slideright"}"
            :same-size true
            (bluetooth)
            (wifi)
          )
        )
        (power)
      )
    )
  )
)

(defvar networkIndex 0)

(defwidget Spacer [] (box :halign "fill" :class "spacerbar"))

(defvar hover_state "")
